---
- name: Set asdf variables if not already defined
  set_fact:
    _asdf_version: "{{ asdf_version | default('0.16.7') }}"
    _asdf_url: "{{ asdf_url | default('https://github.com/asdf-vm/asdf/releases/download/v{{ _asdf_version }}/asdf-v{{ _asdf_version }}-linux-amd64.tar.gz') }}"
    _asdf_install_dir: "{{ asdf_install_dir | default('/usr/local/bin') }}"
    _asdf_download_dir: "{{ asdf_download_dir | default('/tmp') }}"

- name: Download asdf archive
  get_url:
    url: "{{ _asdf_url }}"
    dest: "{{ _asdf_download_dir }}/asdf-v{{ _asdf_version }}-linux-amd64.tar.gz"
    mode: "0644"
  become: true

- name: Download MD5 checksum file
  get_url:
    url: "{{ _asdf_url }}.md5"
    dest: "{{ _asdf_download_dir }}/asdf-v{{ _asdf_version }}-linux-amd64.tar.gz.md5"
    mode: "0644"
  become: true

- name: Read MD5 checksum from file
  shell: cat {{ _asdf_download_dir }}/asdf-v{{ _asdf_version }}-linux-amd64.tar.gz.md5
  register: md5_file_content
  changed_when: false
  become: true

- name: Calculate MD5 checksum of downloaded archive
  shell: md5sum {{ _asdf_download_dir }}/asdf-v{{ _asdf_version }}-linux-amd64.tar.gz | awk '{print $1}'
  register: calculated_md5
  changed_when: false
  become: true

- name: Verify MD5 checksum
  fail:
    msg: "MD5 checksum verification failed. Expected: {{ md5_file_content.stdout | trim }}, Got: {{ calculated_md5.stdout | trim }}"
  when: md5_file_content.stdout | trim != calculated_md5.stdout | trim

- name: Extract asdf binary to installation directory
  unarchive:
    src: "{{ _asdf_download_dir }}/asdf-v{{ _asdf_version }}-linux-amd64.tar.gz"
    dest: "{{ _asdf_install_dir }}"
  become: true

- name: Set executable permissions on asdf binary
  file:
    path: "{{ _asdf_install_dir }}/asdf"
    mode: "0755"
  become: true

- name: Verify asdf is on PATH
  command: which asdf
  register: asdf_path_check
  changed_when: false
  failed_when: "'{{ _asdf_install_dir }}/asdf' not in asdf_path_check.stdout"
  ignore_errors: true

- name: Display installation status
  debug:
    msg: "asdf {{ _asdf_version }} has been successfully installed to {{ _asdf_install_dir }}"

- name: Install asdf plugins
  ansible.builtin.shell: |
    source {{ ansible_env.HOME }}/.asdf/asdf.sh
    asdf plugin add {{ item }}
  args:
    executable: /bin/bash
    creates: "{{ ansible_env.HOME }}/.asdf/plugins/{{ item }}"
  loop:
    - nodejs
    - golang
    - rust
    - lua

- name: Create asdf completions directory and generate zsh completion
  ansible.builtin.shell: |
    mkdir -p "${ASDF_DATA_DIR:-$HOME/.asdf}/completions"
    asdf completion zsh > "${ASDF_DATA_DIR:-$HOME/.asdf}/completions/_asdf"
  args:
    executable: /bin/bash
    creates: "{{ ansible_env.ASDF_DATA_DIR | default(ansible_env.HOME + '/.asdf') }}/completions/_asdf"

- name: Add asdf shims directory to path (required) 
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.dotfiles/linux.zshrc"
    line: "export PATH=\"${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH\""
    state: present

- name: Add asdf completions to ~/.dotfiles/linux.zshrc if not present
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.dotfiles/linux.zshrc"
    marker: "# {mark} asdf COMPLETIONS"
    block: |
      # append completions to fpath
      fpath=(${ASDF_DATA_DIR:-$HOME/.asdf}/completions $fpath)
      # initialise completions with ZSH's compinit
      autoload -Uz compinit && compinit
    state: present

- name: Install latest versions of languages
  ansible.builtin.shell: |
    asdf install {{ item }} latest
    asdf set -u {{ item }} latest
  args:
    executable: /bin/bash
  loop:
    - nodejs
    - golang
    - rust
    - lua

- name: Set GOROOT for asdf managed golang
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.dotfiles/linux.zshrc"
    line: ". ~/.asdf/plugins/golang/set-env.zsh"
    state: present
