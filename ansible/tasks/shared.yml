---
# Zsh

- name: Install oh-my-zsh
  ansible.builtin.shell: >
    curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | bash
  args:
    creates: "{{ ansible_env.HOME }}/.oh-my-zsh"

- name: Clone zsh plugins theme & plugins
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    depth: 1
  loop:
    - repo: https://github.com/romkatv/powerlevel10k.git
      dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/themes/powerlevel10k"
    - repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
      dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
    - repo: https://github.com/zsh-users/zsh-autosuggestions.git
      dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
    - repo: https://github.com/MichaelAquilina/zsh-you-should-use.git
      dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/you-should-use"

- name: Create symlinks for dotfiles
  file:
    src: "{{ dotfiles_dir }}/{{ item }}"
    dest: "{{ ansible_env.HOME }}/{{ item }}"
    state: link
    force: yes
  loop:
    - .gitconfig
    - .gitignore_global
    - .p10k.zsh
    - .tigrc
    - .tmux.conf
    - .zshrc

- name: Check if ~/.config/nvim exists
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.config/nvim"
  register: nvim_config

- name: Get readable timestamp for backup
  ansible.builtin.command: date "+%Y%m%d_%H%M%S"
  register: timestamp
  when: 
    - nvim_config.stat.exists
    - not nvim_config.stat.islnk

- name: Backup existing nvim config
  ansible.builtin.command:
    cmd: "mv {{ ansible_env.HOME }}/.config/nvim {{ ansible_env.HOME }}/.config.nvim.{{ timestamp.stdout }}"
  when: 
    - nvim_config.stat.exists
    - not nvim_config.stat.islnk

- name: Create symlinks for shared configs
  file:
    src: "{{ dotfiles_dir }}/.config/{{ item }}"
    dest: "{{ ansible_env.HOME }}/.config/{{ item }}"
    state: link
    force: yes
  loop:
    - jrnl
    - nvim

# Ensure directory where pipx stores apps is in your PATH environment variable.
# Also if pipx was installed via `pip install --user`, ensure pipx itself is
# in your PATH. Note that running this may modify your shell's configuration
# file(s) such as '~/.bashrc'.
- name: Ensure pipx binaries are in PATH
  ansible.builtin.command: pipx ensurepath
  register: pipx_path_result
  changed_when: pipx_path_result.rc == 0 and pipx_path_result.stdout != ""
  failed_when: pipx_path_result.rc != 0

# Misc.

- name: Setup Downloads folder cleanup
  ansible.builtin.cron:
    name: "Remove old files from Downloads"
    hour: "12"
    minute: "0"
    job: "find ~/Downloads/ -mtime +7 -maxdepth 1 -exec rm -rf {} \\;"
    state: present

- name: Setup tmux resurrect cleanup
  ansible.builtin.cron:
    name: "Remove old tmux resurrect files"
    hour: "12"
    minute: "0"
    job: "find ~/.tmux/resurrect/ -mtime +7 -maxdepth 1 -exec rm -rf {} \\;"
    state: present

# asdf

- name: Clone asdf version manager
  git:
    repo: https://github.com/asdf-vm/asdf.git
    dest: "{{ ansible_env.HOME }}/.asdf"
    version: v0.14.1

- name: Install asdf plugins
  ansible.builtin.shell: |
    source {{ ansible_env.HOME }}/.asdf/asdf.sh
    asdf plugin add {{ item }}
  args:
    executable: /bin/bash
    creates: "{{ ansible_env.HOME }}/.asdf/plugins/{{ item }}"
  loop:
    - nodejs
    - golang
    - rust
    - lua

- name: Install latest versions of languages
  ansible.builtin.shell: |
    source {{ ansible_env.HOME }}/.asdf/asdf.sh
    asdf install {{ item }} latest
    asdf global {{ item }} latest
  args:
    executable: /bin/bash
  loop:
    - nodejs
    - golang
    - rust
    - lua

# tmux

- name: Ensure tmux plugins directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.tmux/plugins"
    state: directory
    mode: '0755'

- name: Check if tmux plugin manager has been installed
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
  register: tpm

- name: Install tmux plugin manager
  git:
    repo: "https://github.com/tmux-plugins/tpm"
    dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
    depth: 1
  when:
    - not tpm.stat.exists

- name: Check if TPM install script exists
  ansible.builtin.stat:
    path: "~/.tmux/plugins/tpm/scripts/install_plugins.sh"
  register: tpm_script

# A session needs to be running for plugin installation to work
- name: Start tmux server
  ansible.builtin.shell: tmux start-server
  changed_when: false

- name: Create a new tmux session if none exists
  ansible.builtin.shell: tmux new-session -d -s ansible_tmp || true
  changed_when: false

- name: Install tmux plugins using tpm
  ansible.builtin.shell:
    tmux source ~/.tmux.conf && ~/.tmux/plugins/tpm/scripts/install_plugins.sh
  args:
    creates: "~/.tmux/plugins/tmux-yank" # skip when already installed
  register: tpm_result
  changed_when: tpm_result.rc == 0
  when:
    - tpm_script.stat.exists

- name: Clean up temporary tmux session
  ansible.builtin.shell: tmux kill-session -t ansible_tmp || true
  changed_when: false

- name: Display Dropbox installation instructions
  debug:
    msg:
      - '======================================================================'
      - ' NEXT STEPS - Install Dropbox and Configure jrnl:'
      - ''
      - ' 1. Install Dropbox:'
      - '    Visit: https://www.dropbox.com/install'
      - '    Follow the installation instructions for your system'
      - ' '
      - ' 2. After Dropbox is installed and configured, create the symlink:'
      - '    ln -s ~/Path/To/Dropbox/jrnl ~/.jrnl'
      - ''
      - ' This will make the different jrnl files available and synced to other'
      - ' computers.'
      - '======================================================================'
  run_once: true
  delegate_to: localhost
